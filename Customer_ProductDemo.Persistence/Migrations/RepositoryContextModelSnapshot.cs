// <auto-generated />
using System;
using Customer_ProductDemo.Persistence.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Customer_ProductDemo.Persistence.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<string>("ArearLocality")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuildingNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StreetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerId"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PaymentMethodCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefPaymentMethodPaymentMethodeCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("RefPaymentMethodPaymentMethodeCode");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.CustomerAddressHistory", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnOrder(0);

                    b.Property<int>("AddressId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<string>("AddressTypeCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("RefAddressTypeAddressTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId", "AddressId");

                    b.HasIndex("AddressId");

                    b.HasIndex("RefAddressTypeAddressTypeCode");

                    b.ToTable("CustomerAddressHistories");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.CustomerOrder", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OrderStatusCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId", "OrderId");

                    b.HasIndex("OrderStatusCode");

                    b.ToTable("CustomerOrders");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemId"));

                    b.Property<int?>("CustomerOrderCustomerId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerOrderOrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnOrder(1);

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int")
                        .HasColumnOrder(2);

                    b.HasKey("OrderItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("CustomerOrderCustomerId", "CustomerOrderOrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("ProductName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductPrice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId");

                    b.HasIndex("ProductTypeCode");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefAddressType", b =>
                {
                    b.Property<string>("AddressTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("AddressTypeCode");

                    b.ToTable("RefAddressTypes");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefOrderStatusCode", b =>
                {
                    b.Property<string>("OrderStatusCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Order_Status_Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefOrderStatusCodeOrderStatusCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderStatusCode");

                    b.HasIndex("RefOrderStatusCodeOrderStatusCode");

                    b.ToTable("RefOrderStatusCodes");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefPaymentMethod", b =>
                {
                    b.Property<string>("PaymentMethodeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethodDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentMethodeCode");

                    b.ToTable("RefPaymentMethods");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefProductType", b =>
                {
                    b.Property<string>("ProductTypeCode")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProductTypeDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductTypeCode");

                    b.ToTable("RefproductTypes");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Customer", b =>
                {
                    b.HasOne("Customer_ProductDemo.Domain.Entities.RefPaymentMethod", "RefPaymentMethod")
                        .WithMany("Customers")
                        .HasForeignKey("RefPaymentMethodPaymentMethodeCode");

                    b.Navigation("RefPaymentMethod");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.CustomerAddressHistory", b =>
                {
                    b.HasOne("Customer_ProductDemo.Domain.Entities.Address", "Address")
                        .WithMany("CustomerAddressHistories")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer_ProductDemo.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerAddressHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer_ProductDemo.Domain.Entities.RefAddressType", null)
                        .WithMany("CustomerAddressHistories")
                        .HasForeignKey("RefAddressTypeAddressTypeCode");

                    b.Navigation("Address");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.CustomerOrder", b =>
                {
                    b.HasOne("Customer_ProductDemo.Domain.Entities.Customer", "Customer")
                        .WithMany("CustomerOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer_ProductDemo.Domain.Entities.RefOrderStatusCode", "RefOrderStatusCode")
                        .WithMany()
                        .HasForeignKey("OrderStatusCode");

                    b.Navigation("Customer");

                    b.Navigation("RefOrderStatusCode");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Customer_ProductDemo.Domain.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Customer_ProductDemo.Domain.Entities.CustomerOrder", null)
                        .WithMany("OrderItem")
                        .HasForeignKey("CustomerOrderCustomerId", "CustomerOrderOrderId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Product", b =>
                {
                    b.HasOne("Customer_ProductDemo.Domain.Entities.RefProductType", "RefProductType")
                        .WithMany("Products")
                        .HasForeignKey("ProductTypeCode");

                    b.Navigation("RefProductType");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefOrderStatusCode", b =>
                {
                    b.HasOne("Customer_ProductDemo.Domain.Entities.RefOrderStatusCode", null)
                        .WithMany("RefOrderStatusCodes")
                        .HasForeignKey("RefOrderStatusCodeOrderStatusCode");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Address", b =>
                {
                    b.Navigation("CustomerAddressHistories");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Customer", b =>
                {
                    b.Navigation("CustomerAddressHistories");

                    b.Navigation("CustomerOrders");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.CustomerOrder", b =>
                {
                    b.Navigation("OrderItem");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefAddressType", b =>
                {
                    b.Navigation("CustomerAddressHistories");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefOrderStatusCode", b =>
                {
                    b.Navigation("RefOrderStatusCodes");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefPaymentMethod", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("Customer_ProductDemo.Domain.Entities.RefProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
